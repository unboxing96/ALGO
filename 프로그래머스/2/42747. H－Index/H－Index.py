# 문제 분석
# h번 이상 인용된 논문이 h편 이상 / 나머지는 h번 이하 인용
    # 즉, h번 이상 인용된 논문이 절반 이상이다.
        # 아니다. 단순 과반이 아니라, h 이상이 되어야 한다.
    # 논문 배열을 정렬 했을 때, 중간 인덱스가 h 이상이면 된다. -> 최소 기준 만족
    # h 값을 하나씩 올려가면서, 중간 인덱스가 h 미만이 되기 직전까지 갱신하면 되지 않을까? -> 그냥 배열 내부 원소로 테스트 하면 된다.
# 중간 인덱스?
    # 배열이 홀수인 경우
        # len(arr) // 2
    # 배열이 짝수인 경우
        # len(arr) // 2 -> 양쪽의 개수가 같아도 조건은 만족하니까.
# h가 최댓값을 H-Index라고 한다. 이것을 return 하자.

# 문제 분석2
# h-index 이상인 원소가, h-index개 이상 있어야 한다.
# 배열이 등차가 1인 자연수의 등차수열인 경우 (ex. [1, 2, 3, 4, 5, 6])
    # h-index를 하나씩 올려가면서, 현재 인덱스가, 배열 전체 길이의 절반을 넘어서면, 그 이전 값이 답이다.
# 배열이 그냥 오름차순인 경우 (ex. [1, 2, 4, 8, 9, 10])
    # h-index를 하나씩 올린다.
    # h-index 위치의 값이, 남아있는 원소의 개수보다 커지면, 그 이전 값이 답이다.
# 배열이 등차가 -1인 등차수열인 경우 [6, 5, 4, 3, 2, 1]
    # h-index를 하나씩 올린다.
    # h-index 위치의 값이, h-index보다 작아지면 답이다.
# 배열이 그냥 내림차순인 경우 (ex. [10, 9, 8, 4, 2, 1])
    # h-index를 하나씩 올린다.
    # h-index 위치의 값이, h-index와 같아지면 답이다.

# 접근
# 배열을 정렬한다. sortedCitations = sorted(citations)
# 정렬된 배열을 탐색한다. 각 원소를 h-index의 후보로 삼는다.
    # 배열의 중앙값이, 현재 후보의 값 이상인 경우 조건을 충족한다.
    # 배열을 전체 순회하면서, 값을 갱신한다.

def solution(citations):
    citations.sort(reverse = True)
    
    for i in range(len(citations)):
        if citations[i] < i + 1:
            return i
    
    return len(citations)